/*
CockroachDB Cloud API

This is an early access, experimental version of the Cloud API. The interface and output is subject to change, and there may be bugs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2022-03-31
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ServerlessClusterUpdateSpecification struct for ServerlessClusterUpdateSpecification
type ServerlessClusterUpdateSpecification struct {
	SpendLimit int32 `json:"spend_limit"`
}

// NewServerlessClusterUpdateSpecification instantiates a new ServerlessClusterUpdateSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerlessClusterUpdateSpecification(spendLimit int32) *ServerlessClusterUpdateSpecification {
	this := ServerlessClusterUpdateSpecification{}
	this.SpendLimit = spendLimit
	return &this
}

// NewServerlessClusterUpdateSpecificationWithDefaults instantiates a new ServerlessClusterUpdateSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerlessClusterUpdateSpecificationWithDefaults() *ServerlessClusterUpdateSpecification {
	this := ServerlessClusterUpdateSpecification{}
	return &this
}

// GetSpendLimit returns the SpendLimit field value
func (o *ServerlessClusterUpdateSpecification) GetSpendLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SpendLimit
}

// GetSpendLimitOk returns a tuple with the SpendLimit field value
// and a boolean to check if the value has been set.
func (o *ServerlessClusterUpdateSpecification) GetSpendLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SpendLimit, true
}

// SetSpendLimit sets field value
func (o *ServerlessClusterUpdateSpecification) SetSpendLimit(v int32) {
	o.SpendLimit = v
}

func (o ServerlessClusterUpdateSpecification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["spend_limit"] = o.SpendLimit
	}
	return json.Marshal(toSerialize)
}

type NullableServerlessClusterUpdateSpecification struct {
	value *ServerlessClusterUpdateSpecification
	isSet bool
}

func (v NullableServerlessClusterUpdateSpecification) Get() *ServerlessClusterUpdateSpecification {
	return v.value
}

func (v *NullableServerlessClusterUpdateSpecification) Set(val *ServerlessClusterUpdateSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableServerlessClusterUpdateSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableServerlessClusterUpdateSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerlessClusterUpdateSpecification(val *ServerlessClusterUpdateSpecification) *NullableServerlessClusterUpdateSpecification {
	return &NullableServerlessClusterUpdateSpecification{value: val, isSet: true}
}

func (v NullableServerlessClusterUpdateSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerlessClusterUpdateSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


