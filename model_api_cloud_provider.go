/*
CockroachDB Cloud API

This is an early access, experimental version of the Cloud API. The interface and output is subject to change, and there may be bugs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2022-03-31
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ccloud

import (
	"encoding/json"
	"fmt"
)

// ApiCloudProvider  - GCP: The Google Cloud Platform cloud provider.  - AWS: The Amazon Web Services cloud provider.
type ApiCloudProvider string

// List of api.CloudProvider
const (
	CLOUD_PROVIDER_UNSPECIFIED ApiCloudProvider = "CLOUD_PROVIDER_UNSPECIFIED"
	GCP                        ApiCloudProvider = "GCP"
	AWS                        ApiCloudProvider = "AWS"
)

// All allowed values of ApiCloudProvider enum
var AllowedApiCloudProviderEnumValues = []ApiCloudProvider{
	"CLOUD_PROVIDER_UNSPECIFIED",
	"GCP",
	"AWS",
}

func (v *ApiCloudProvider) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiCloudProvider(value)
	for _, existing := range AllowedApiCloudProviderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiCloudProvider", value)
}

// NewApiCloudProviderFromValue returns a pointer to a valid ApiCloudProvider
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiCloudProviderFromValue(v string) (*ApiCloudProvider, error) {
	ev := ApiCloudProvider(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiCloudProvider: valid values are %v", v, AllowedApiCloudProviderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiCloudProvider) IsValid() bool {
	for _, existing := range AllowedApiCloudProviderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to api.CloudProvider value
func (v ApiCloudProvider) Ptr() *ApiCloudProvider {
	return &v
}

type NullableApiCloudProvider struct {
	value *ApiCloudProvider
	isSet bool
}

func (v NullableApiCloudProvider) Get() *ApiCloudProvider {
	return v.value
}

func (v *NullableApiCloudProvider) Set(val *ApiCloudProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableApiCloudProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableApiCloudProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiCloudProvider(val *ApiCloudProvider) *NullableApiCloudProvider {
	return &NullableApiCloudProvider{value: val, isSet: true}
}

func (v NullableApiCloudProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiCloudProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
