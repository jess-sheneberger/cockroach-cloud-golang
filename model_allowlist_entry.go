/*
CockroachDB Cloud API

This is an early access, experimental version of the Cloud API. The interface and output is subject to change, and there may be bugs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2022-03-31
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AllowlistEntry struct for AllowlistEntry
type AllowlistEntry struct {
	CidrIp string `json:"cidr_ip"`
	CidrMask int32 `json:"cidr_mask"`
	Ui bool `json:"ui"`
	Sql bool `json:"sql"`
	Name *string `json:"name,omitempty"`
}

// NewAllowlistEntry instantiates a new AllowlistEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllowlistEntry(cidrIp string, cidrMask int32, ui bool, sql bool) *AllowlistEntry {
	this := AllowlistEntry{}
	this.CidrIp = cidrIp
	this.CidrMask = cidrMask
	this.Ui = ui
	this.Sql = sql
	return &this
}

// NewAllowlistEntryWithDefaults instantiates a new AllowlistEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllowlistEntryWithDefaults() *AllowlistEntry {
	this := AllowlistEntry{}
	return &this
}

// GetCidrIp returns the CidrIp field value
func (o *AllowlistEntry) GetCidrIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CidrIp
}

// GetCidrIpOk returns a tuple with the CidrIp field value
// and a boolean to check if the value has been set.
func (o *AllowlistEntry) GetCidrIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CidrIp, true
}

// SetCidrIp sets field value
func (o *AllowlistEntry) SetCidrIp(v string) {
	o.CidrIp = v
}

// GetCidrMask returns the CidrMask field value
func (o *AllowlistEntry) GetCidrMask() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CidrMask
}

// GetCidrMaskOk returns a tuple with the CidrMask field value
// and a boolean to check if the value has been set.
func (o *AllowlistEntry) GetCidrMaskOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CidrMask, true
}

// SetCidrMask sets field value
func (o *AllowlistEntry) SetCidrMask(v int32) {
	o.CidrMask = v
}

// GetUi returns the Ui field value
func (o *AllowlistEntry) GetUi() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ui
}

// GetUiOk returns a tuple with the Ui field value
// and a boolean to check if the value has been set.
func (o *AllowlistEntry) GetUiOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ui, true
}

// SetUi sets field value
func (o *AllowlistEntry) SetUi(v bool) {
	o.Ui = v
}

// GetSql returns the Sql field value
func (o *AllowlistEntry) GetSql() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sql
}

// GetSqlOk returns a tuple with the Sql field value
// and a boolean to check if the value has been set.
func (o *AllowlistEntry) GetSqlOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sql, true
}

// SetSql sets field value
func (o *AllowlistEntry) SetSql(v bool) {
	o.Sql = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AllowlistEntry) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllowlistEntry) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AllowlistEntry) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AllowlistEntry) SetName(v string) {
	o.Name = &v
}

func (o AllowlistEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["cidr_ip"] = o.CidrIp
	}
	if true {
		toSerialize["cidr_mask"] = o.CidrMask
	}
	if true {
		toSerialize["ui"] = o.Ui
	}
	if true {
		toSerialize["sql"] = o.Sql
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAllowlistEntry struct {
	value *AllowlistEntry
	isSet bool
}

func (v NullableAllowlistEntry) Get() *AllowlistEntry {
	return v.value
}

func (v *NullableAllowlistEntry) Set(val *AllowlistEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowlistEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowlistEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowlistEntry(val *AllowlistEntry) *NullableAllowlistEntry {
	return &NullableAllowlistEntry{value: val, isSet: true}
}

func (v NullableAllowlistEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowlistEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


