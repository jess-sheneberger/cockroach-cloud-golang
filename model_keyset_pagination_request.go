/*
CockroachDB Cloud API

This is an early access, experimental version of the Cloud API. The interface and output is subject to change, and there may be bugs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2022-03-31
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// KeysetPaginationRequest struct for KeysetPaginationRequest
type KeysetPaginationRequest struct {
	StartKey *string `json:"start_key,omitempty"`
	Direction *PageDirection `json:"direction,omitempty"`
	Limit *int32 `json:"limit,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	Order *SortOrder `json:"order,omitempty"`
}

// NewKeysetPaginationRequest instantiates a new KeysetPaginationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeysetPaginationRequest() *KeysetPaginationRequest {
	this := KeysetPaginationRequest{}
	var direction PageDirection = NEXT
	this.Direction = &direction
	var order SortOrder = ASC
	this.Order = &order
	return &this
}

// NewKeysetPaginationRequestWithDefaults instantiates a new KeysetPaginationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeysetPaginationRequestWithDefaults() *KeysetPaginationRequest {
	this := KeysetPaginationRequest{}
	var direction PageDirection = NEXT
	this.Direction = &direction
	var order SortOrder = ASC
	this.Order = &order
	return &this
}

// GetStartKey returns the StartKey field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetStartKey() string {
	if o == nil || o.StartKey == nil {
		var ret string
		return ret
	}
	return *o.StartKey
}

// GetStartKeyOk returns a tuple with the StartKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetPaginationRequest) GetStartKeyOk() (*string, bool) {
	if o == nil || o.StartKey == nil {
		return nil, false
	}
	return o.StartKey, true
}

// HasStartKey returns a boolean if a field has been set.
func (o *KeysetPaginationRequest) HasStartKey() bool {
	if o != nil && o.StartKey != nil {
		return true
	}

	return false
}

// SetStartKey gets a reference to the given string and assigns it to the StartKey field.
func (o *KeysetPaginationRequest) SetStartKey(v string) {
	o.StartKey = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetDirection() PageDirection {
	if o == nil || o.Direction == nil {
		var ret PageDirection
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetPaginationRequest) GetDirectionOk() (*PageDirection, bool) {
	if o == nil || o.Direction == nil {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *KeysetPaginationRequest) HasDirection() bool {
	if o != nil && o.Direction != nil {
		return true
	}

	return false
}

// SetDirection gets a reference to the given PageDirection and assigns it to the Direction field.
func (o *KeysetPaginationRequest) SetDirection(v PageDirection) {
	o.Direction = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetPaginationRequest) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *KeysetPaginationRequest) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *KeysetPaginationRequest) SetLimit(v int32) {
	o.Limit = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetPaginationRequest) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *KeysetPaginationRequest) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *KeysetPaginationRequest) SetTime(v time.Time) {
	o.Time = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *KeysetPaginationRequest) GetOrder() SortOrder {
	if o == nil || o.Order == nil {
		var ret SortOrder
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeysetPaginationRequest) GetOrderOk() (*SortOrder, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *KeysetPaginationRequest) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given SortOrder and assigns it to the Order field.
func (o *KeysetPaginationRequest) SetOrder(v SortOrder) {
	o.Order = &v
}

func (o KeysetPaginationRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartKey != nil {
		toSerialize["start_key"] = o.StartKey
	}
	if o.Direction != nil {
		toSerialize["direction"] = o.Direction
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	return json.Marshal(toSerialize)
}

type NullableKeysetPaginationRequest struct {
	value *KeysetPaginationRequest
	isSet bool
}

func (v NullableKeysetPaginationRequest) Get() *KeysetPaginationRequest {
	return v.value
}

func (v *NullableKeysetPaginationRequest) Set(val *KeysetPaginationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeysetPaginationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeysetPaginationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeysetPaginationRequest(val *KeysetPaginationRequest) *NullableKeysetPaginationRequest {
	return &NullableKeysetPaginationRequest{value: val, isSet: true}
}

func (v NullableKeysetPaginationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeysetPaginationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


