/*
CockroachDB Cloud API

This is an early access, experimental version of the Cloud API. The interface and output is subject to change, and there may be bugs.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->

API version: 2022-03-31
Contact: support@cockroachlabs.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CMEKKeyInfo CMEKKeyInfo contains the status of a customer-provided key alongside the specification.
type CMEKKeyInfo struct {
	Status *CMEKStatus `json:"status,omitempty"`
	UserMessage *string `json:"user_message,omitempty"`
	Spec *CMEKKeySpecification `json:"spec,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewCMEKKeyInfo instantiates a new CMEKKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCMEKKeyInfo() *CMEKKeyInfo {
	this := CMEKKeyInfo{}
	var status CMEKStatus = UNKNOWN_STATUS
	this.Status = &status
	return &this
}

// NewCMEKKeyInfoWithDefaults instantiates a new CMEKKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCMEKKeyInfoWithDefaults() *CMEKKeyInfo {
	this := CMEKKeyInfo{}
	var status CMEKStatus = UNKNOWN_STATUS
	this.Status = &status
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CMEKKeyInfo) GetStatus() CMEKStatus {
	if o == nil || o.Status == nil {
		var ret CMEKStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeyInfo) GetStatusOk() (*CMEKStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CMEKKeyInfo) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CMEKStatus and assigns it to the Status field.
func (o *CMEKKeyInfo) SetStatus(v CMEKStatus) {
	o.Status = &v
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise.
func (o *CMEKKeyInfo) GetUserMessage() string {
	if o == nil || o.UserMessage == nil {
		var ret string
		return ret
	}
	return *o.UserMessage
}

// GetUserMessageOk returns a tuple with the UserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeyInfo) GetUserMessageOk() (*string, bool) {
	if o == nil || o.UserMessage == nil {
		return nil, false
	}
	return o.UserMessage, true
}

// HasUserMessage returns a boolean if a field has been set.
func (o *CMEKKeyInfo) HasUserMessage() bool {
	if o != nil && o.UserMessage != nil {
		return true
	}

	return false
}

// SetUserMessage gets a reference to the given string and assigns it to the UserMessage field.
func (o *CMEKKeyInfo) SetUserMessage(v string) {
	o.UserMessage = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *CMEKKeyInfo) GetSpec() CMEKKeySpecification {
	if o == nil || o.Spec == nil {
		var ret CMEKKeySpecification
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeyInfo) GetSpecOk() (*CMEKKeySpecification, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *CMEKKeyInfo) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given CMEKKeySpecification and assigns it to the Spec field.
func (o *CMEKKeyInfo) SetSpec(v CMEKKeySpecification) {
	o.Spec = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CMEKKeyInfo) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeyInfo) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CMEKKeyInfo) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CMEKKeyInfo) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *CMEKKeyInfo) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CMEKKeyInfo) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CMEKKeyInfo) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *CMEKKeyInfo) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o CMEKKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UserMessage != nil {
		toSerialize["user_message"] = o.UserMessage
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableCMEKKeyInfo struct {
	value *CMEKKeyInfo
	isSet bool
}

func (v NullableCMEKKeyInfo) Get() *CMEKKeyInfo {
	return v.value
}

func (v *NullableCMEKKeyInfo) Set(val *CMEKKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCMEKKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCMEKKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCMEKKeyInfo(val *CMEKKeyInfo) *NullableCMEKKeyInfo {
	return &NullableCMEKKeyInfo{value: val, isSet: true}
}

func (v NullableCMEKKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCMEKKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


